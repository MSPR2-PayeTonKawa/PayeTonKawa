name: CI/CD - Integration Tests & SonarCloud Analysis

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ main ]

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  integration-tests:
    name: Integration Tests & SonarCloud Analysis
    runs-on: ubuntu-latest
    
    services:
      mysql-customers:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: customers
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      mysql-products:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: products
        ports:
          - 3307:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      mysql-orders:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: orders
        ports:
          - 3308:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: payetonkawa
          RABBITMQ_DEFAULT_PASS: kawa2024!
        ports:
          - 5672:5672
          - 15672:15672
        options: --health-cmd="rabbitmq-diagnostics -q ping" --health-interval=30s --health-timeout=10s --health-retries=5

    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clone microservices repositories
        run: |
          git clone https://github.com/${{ github.repository_owner }}/PayeTonKawa-Customers.git ../PayeTonKawa-Customers
          git clone https://github.com/${{ github.repository_owner }}/PayeTonKawa-Products.git ../PayeTonKawa-Products
          git clone https://github.com/${{ github.repository_owner }}/PayeTonKawa-Orders.git ../PayeTonKawa-Orders

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Update docker-compose for CI
        run: |
          cat > docker-compose.ci.yml << EOF
          services:
            api-customers:
              build: ../PayeTonKawa-Customers
              container_name: PTK-api-customers
              ports:
                - "8001:80"
              volumes:
                - ../PayeTonKawa-Customers:/var/www/html
              environment:
                - DB_HOST=host.docker.internal
                - DB_PORT=3306
                - DB_DATABASE=customers
                - DB_USERNAME=root
                - DB_PASSWORD=root
                - RABBITMQ_HOST=host.docker.internal
                - RABBITMQ_PORT=5672
                - RABBITMQ_USER=payetonkawa
                - RABBITMQ_PASSWORD=kawa2024!
                - RABBITMQ_VHOST=/
                - RABBITMQ_EXCHANGE=payetonkawa
                - RABBITMQ_QUEUE=customers
              extra_hosts:
                - "host.docker.internal:host-gateway"
              command: >
                sh -c "apache2-foreground &
                       sleep 15 &&
                       php artisan migrate --force &&
                       php artisan rabbitmq:test &&
                       php artisan events:listen &
                       wait"

            api-products:
              build: ../PayeTonKawa-Products
              container_name: PTK-api-products
              ports:
                - "8002:80"
              volumes:
                - ../PayeTonKawa-Products:/var/www/html
              environment:
                - DB_HOST=host.docker.internal
                - DB_PORT=3307
                - DB_DATABASE=products
                - DB_USERNAME=root
                - DB_PASSWORD=root
                - RABBITMQ_HOST=host.docker.internal
                - RABBITMQ_PORT=5672
                - RABBITMQ_USER=payetonkawa
                - RABBITMQ_PASSWORD=kawa2024!
                - RABBITMQ_VHOST=/
                - RABBITMQ_EXCHANGE=payetonkawa
                - RABBITMQ_QUEUE=products
              extra_hosts:
                - "host.docker.internal:host-gateway"
              command: >
                sh -c "apache2-foreground &
                       sleep 15 &&
                       php artisan migrate --force &&
                       php artisan rabbitmq:test &&
                       php artisan events:listen &
                       wait"

            api-orders:
              build: ../PayeTonKawa-Orders
              container_name: PTK-api-orders
              ports:
                - "8003:80"
              volumes:
                - ../PayeTonKawa-Orders:/var/www/html
              environment:
                - DB_HOST=host.docker.internal
                - DB_PORT=3308
                - DB_DATABASE=orders
                - DB_USERNAME=root
                - DB_PASSWORD=root
                - RABBITMQ_HOST=host.docker.internal
                - RABBITMQ_PORT=5672
                - RABBITMQ_USER=payetonkawa
                - RABBITMQ_PASSWORD=kawa2024!
                - RABBITMQ_VHOST=/
                - RABBITMQ_EXCHANGE=payetonkawa
                - RABBITMQ_QUEUE=orders
              extra_hosts:
                - "host.docker.internal:host-gateway"
              command: >
                sh -c "apache2-foreground &
                       sleep 15 &&
                       php artisan migrate --force &&
                       php artisan rabbitmq:test &&
                       php artisan events:listen &
                       wait"

          networks:
            default:
              name: ptk-net
          EOF

      - name: Build and start microservices
        run: |
          docker compose -f docker-compose.ci.yml up -d --build
          sleep 30

      - name: Install dependencies in all services
        run: |
          docker exec PTK-api-customers composer install --no-dev --optimize-autoloader
          docker exec PTK-api-products composer install --no-dev --optimize-autoloader
          docker exec PTK-api-orders composer install --no-dev --optimize-autoloader
          
          docker exec PTK-api-customers composer require --dev phpunit/phpunit --quiet
          docker exec PTK-api-products composer require --dev phpunit/phpunit --quiet
          docker exec PTK-api-orders composer require --dev phpunit/phpunit --quiet

      - name: Wait for services to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8001/api/test; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:8002/api/test; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:8003/api/test; do sleep 2; done'

      - name: Run connection tests
        run: |
          echo "🧪 Testing database and RabbitMQ connections..."
          docker exec PTK-api-customers vendor/bin/phpunit tests/Feature/ConnectionsTest.php
          docker exec PTK-api-products vendor/bin/phpunit tests/Feature/ConnectionsTest.php
          docker exec PTK-api-orders vendor/bin/phpunit tests/Feature/ConnectionsTest.php

      - name: Run all tests with coverage
        run: |
          echo "🧪 Running all tests with coverage..."
          docker exec PTK-api-customers vendor/bin/phpunit --coverage-clover=coverage-customers.xml
          docker exec PTK-api-products vendor/bin/phpunit --coverage-clover=coverage-products.xml
          docker exec PTK-api-orders vendor/bin/phpunit --coverage-clover=coverage-orders.xml

      - name: Copy coverage reports
        run: |
          docker cp PTK-api-customers:/var/www/html/coverage-customers.xml ./coverage-customers.xml
          docker cp PTK-api-products:/var/www/html/coverage-products.xml ./coverage-products.xml
          docker cp PTK-api-orders:/var/www/html/coverage-orders.xml ./coverage-orders.xml

      - name: Test API endpoints
        run: |
          echo "🌐 Testing API endpoints..."
          curl -f http://localhost:8001/api/test || exit 1
          curl -f http://localhost:8002/api/test || exit 1
          curl -f http://localhost:8003/api/test || exit 1

      - name: Test RabbitMQ Management Interface
        run: |
          echo "🐰 Testing RabbitMQ Management..."
          curl -f -u payetonkawa:kawa2024! http://localhost:15672/api/overview || exit 1

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=${{ github.repository_owner }}_PayeTonKawa
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.sources=.
            -Dsonar.exclusions=vendor/**,node_modules/**,storage/**,bootstrap/cache/**
            -Dsonar.php.coverage.reportPaths=coverage-customers.xml,coverage-products.xml,coverage-orders.xml
            -Dsonar.php.tests.reportPath=tests/
            -Dsonar.sourceEncoding=UTF-8

      - name: Show container logs on failure
        if: failure()
        run: |
          echo "📋 Container logs:"
          docker compose -f docker-compose.ci.yml logs

      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.ci.yml down -v
          docker system prune -f

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify Nginx Configuration
        run: |
          echo "🔧 Validating Nginx configuration..."
          if [ -f nginx-conf.yml ]; then
            echo "✅ Nginx configuration file found"
          else
            echo "❌ Nginx configuration file not found"
            exit 1
          fi

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "🚀 Starting deployment to production..."
            
            cd /home/debian/payetonkawa/PayeTonKawa
            
            echo "📥 Pulling latest changes..."
            git fetch --all
            git reset --hard origin/main
            
            echo "🔧 Updating Nginx configuration..."
            if [ -f nginx-conf.yml ]; then
              sudo cp nginx-conf.yml /etc/nginx/sites-available/payetonkawa
              sudo nginx -t && sudo systemctl reload nginx
              echo "✅ Nginx configuration updated and reloaded"
            fi
            
            echo "🐳 Restarting Docker containers..."
            sudo docker compose down
            sudo docker compose up -d
            
            echo "⏳ Waiting for services to be ready..."
            sleep 30
            
            echo "🧪 Running health checks..."
            curl -f http://localhost:8001/api/test || echo "⚠️ Customers API not responding"
            curl -f http://localhost:8002/api/test || echo "⚠️ Products API not responding"
            curl -f http://localhost:8003/api/test || echo "⚠️ Orders API not responding"
            
            echo "✅ Deployment completed successfully!" 